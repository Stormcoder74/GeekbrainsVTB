================================
Теряев Сергей ДЗ 07
https://github.com/Stormcoder74/GeekbrainsVTB/tree/master/less07
================================

package com.geekbrains.teryaevs.homework;

import java.util.concurrent.CountDownLatch;

public class Finish {
    private Car winner;
    private CountDownLatch finishLine;

    public Finish(CountDownLatch finishLine) {
        this.finishLine = finishLine;
    }

    public void makeFinish(Car winner){
        finishLine.countDown();
        this.winner = winner;
    }

    public Car getWinner() {
        return winner;
    }

    public CountDownLatch getFinishLine() {
        return finishLine;
    }
}

public class Car implements Runnable {
    private static int CARS_COUNT;

    static {
        CARS_COUNT = 0;
    }

    private Race race;
    private int speed;
    private String name;
    private CyclicBarrier start;

    public Car(Race race, int speed, CyclicBarrier start) {
        this.race = race;
        this.speed = speed;
        CARS_COUNT++;
        this.name = "Участник #" + CARS_COUNT;
        this.start = start;
    }

    public String getName() {
        return name;
    }

    public int getSpeed() {
        return speed;
    }

    @Override
    public void run() {
        try {
            System.out.println(this.name + " готовится");
            Thread.sleep(500 + (int) (Math.random() * 800));

            System.out.println(this.name + " готов");
            start.await();
            Thread.sleep(10);
        } catch (Exception e) {
            e.printStackTrace();
        }
        for (int i = 0; i < race.getStages().size(); i++) {
            Stage stage = race.getStages().get(i);
            stage.go(this);
            if (stage.getFinish() != null)
                stage.getFinish().makeFinish(this);
        }
    }
}

public abstract class Stage {
    protected int length;
    protected String description;
    protected Finish finish;

    public String getDescription() {
        return description;
    }

    public Finish getFinish() {
        return finish;
    }

    public abstract void go(Car c);
}

public class Road extends Stage {

    public Road(int length) {
        this.length = length;
        this.description = "Дорога " + length + " метров";
    }

    public Road(int length, Finish finish) {
        this(length);
        this.finish = finish;
    }

    @Override
    public void go(Car c) {
        try {
            System.out.println(c.getName() + " начал этап: " + description);
            Thread.sleep(length / c.getSpeed() * 1000);
            System.out.println(c.getName() + " закончил этап: " + description);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

import static com.geekbrains.teryaevs.homework.MainClass.CARS_COUNT;

public class Tunnel extends Stage {
    private Semaphore semaphore;

    public Tunnel() {
        this.length = 80;
        this.description = "Тоннель " + length + " метров";
        this.semaphore = new Semaphore(CARS_COUNT / 2);
    }

    @Override
    public void go(Car c) {
        try {
            try {
                System.out.println(c.getName() + " готовится к этапу(ждет): " + description);
                semaphore.acquire();
                System.out.println(c.getName() + " начал этап: " + description);
                Thread.sleep(length / c.getSpeed() * 1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            } finally {
                System.out.println(c.getName() + " закончил этап: " + description);
                semaphore.release();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

public class Race {
    private ArrayList<Stage> stages;

    public ArrayList<Stage> getStages() {
        return stages;
    }

    public Race(Stage... stages) {
        this.stages = new ArrayList<>(Arrays.asList(stages));
    }
}

public class MainClass {
    public static final int CARS_COUNT = 10;

    public static void main(String[] args) throws Exception {
        CyclicBarrier start = new CyclicBarrier(CARS_COUNT + 1);
        Finish finish = new Finish(new CountDownLatch(1));

        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Подготовка!!!");

        Race race = new Race(new Road(60), new Tunnel(), new Road(40, finish));
        Car[] cars = new Car[CARS_COUNT];

        for (int i = 0; i < CARS_COUNT; i++) {
            cars[i] = new Car(race, 20 + (int) (Math.random() * 10), start);
        }

        Thread[] threads = new Thread[CARS_COUNT];

        for (int i = 0; i < CARS_COUNT; i++) {
            Thread thread = new Thread(cars[i]);
            thread.start();
            threads[i] = thread;
        }


        start.await();
        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка началась!!!");

        finish.getFinishLine().await();
        System.out.println(finish.getWinner().getName() + " WIN!!!");

        for (int i = 0; i < CARS_COUNT; i++)
            threads[i].join();
        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка закончилась!!!");

    }
}