================================
Теряев Сергей ДЗ 14
https://github.com/Stormcoder74/GeekbrainsVTB/tree/master/less14
================================
products.html

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="utf-8"/>
    <title>Каталог товаров</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"></script>
</head>

<body>
<div class="container">
    <table class="table table-hover">
        <thead>
        <tr>
            <th>ID</th>
            <th>Название товара</th>
            <th>Цена</th>
            <th>Действия</th>
        </tr>
        </thead>
        <tbody>
        <tr th:each="product : ${products}">
            <td th:text="${product.id}"/>
            <td th:text="${product.title}"/>
            <td th:text="${product.price}"/>
            <td>
                <a th:href="@{'/products/show/' + ${product.id}}" th:text="Просмотреть"/><br>
                <a th:href="@{'/products/edit/' + ${product.id}}" th:text="Редактировать"/>
            </td>
        </tr>
        </tbody>
    </table>
    <span th:text="${'Всего товаров ' + products.size()}"/>
    <br>
    <form th:action="@{/products/add}"
          th:object="${product}" method="post" class="form-horizontal">

        <div style="margin-bottom: 25px" class="input-group">
            <span class="input-group-addon"><i class="glyphicon glyphicon-user"></i></span>
            <input th:field="*{id}" placeholder="id (*)" class="form-control"/>
        </div>

        <div style="margin-bottom: 25px" class="input-group">
            <span class="input-group-addon"><i class="glyphicon glyphicon-user"></i></span>
            <input th:field="*{title}" placeholder="title (*)" class="form-control"/>
        </div>

        <div style="margin-bottom: 25px" class="input-group">
            <span class="input-group-addon"><i class="glyphicon glyphicon-user"></i></span>
            <input th:field="*{price}" placeholder="price (*)" class="form-control"/>
        </div>

        <div style="margin-top: 10px" class="form-group">
            <div class="col-sm-6 controls">
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
        </div>
    </form>
    <br>
    <h2>Filter</h2>
    <form th:action="@{/products/filter}"
          th:object="${filter}" method="post" class="form-horizontal">

        <div style="margin-bottom: 25px" class="input-group">
            <span class="input-group-addon">title filter</span>
            <input th:field="*{titlesPart}" placeholder="title filter" class="form-control"/>
        </div>

        <div style="margin-bottom: 25px" class="input-group">
            <span class="input-group-addon">price filter</span>
            <input th:field="*{priceMin}" placeholder="price minimum" class="form-control"/>
            <input th:field="*{priceMax}" placeholder="price maximum" class="form-control"/>
        </div>

        <div style="margin-top: 10px" class="form-group">
            <div class="col-sm-6 controls">
                <button type="submit" class="btn btn-primary">Filter</button>
            </div>
        </div>
    </form>
</div>
</body>
</html>

package com.geekbrains.teryaevs.entities;

@Entity
@Table(schema = "boot", name = "products")
public class Product {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;

    private double price;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public Product() {
    }

    public Product(Long id, String title, double price) {
        this.id = id;
        this.title = title;
        this.price = price;
    }
}

@Component
public class Filter {
    private String titlesPart;
    private double priceMin;
    private double priceMax;

    @PostConstruct
    private void initFilter() {
        titlesPart = "";
        priceMin = 0;
        priceMax = Double.MAX_VALUE;
    }

    public String getTitlesPart() {
        return titlesPart;
    }

    public void setTitlesPart(String titlesPart) {
        this.titlesPart = titlesPart;
    }

    public double getPriceMin() {
        return priceMin;
    }

    public void setPriceMin(double priceMin) {
        this.priceMin = priceMin;
    }

    public double getPriceMax() {
        return priceMax;
    }

    public void setPriceMax(double priceMax) {
        if (priceMax == 0) {
            this.priceMax = Double.MAX_VALUE;
        } else {
            this.priceMax = priceMax;
        }
    }
}

package com.geekbrains.teryaevs.controllers;

@Controller
@RequestMapping("/products")
public class ProductsController {
    private ProductsService productsService;
    private Filter filter;

    @Autowired
    public void setProductsService(ProductsService productsService) {
        this.productsService = productsService;
    }

    @Autowired
    public void setFilter(Filter filter) {
        this.filter = filter;
    }

    @PostMapping("/add")
    public String addProduct(@ModelAttribute(value = "product") Product product) {
        productsService.add(product);
        return "redirect:/products";
    }

    @GetMapping("/show/{id}")
    public String showOneProduct(Model model, @PathVariable(value = "id") Long id) {
        Product product = productsService.getById(id);
        model.addAttribute("product", product);
        return "product-page";
    }

    @GetMapping
    public String showProductsList(Model model) {
        model.addAttribute("product", new Product());
        model.addAttribute("products", productsService.getAllProducts());
        model.addAttribute("filter", filter);
        return "products";
    }

    @GetMapping("/edit/{id}")
    public String editOneProduct(Model model,
                                 @PathVariable(value = "id") Long id) {
        model.addAttribute("product", productsService.getById(id));
        model.addAttribute("products", productsService.getAllProducts());
        model.addAttribute("filter", filter);
        return "products";
    }

    @PostMapping("/filter")
    public String showFilteredProductsList(Model model,
                                           @ModelAttribute(value = "filter") Filter filter) {
        copyFilter(filter);
        model.addAttribute("product", new Product());
        model.addAttribute("products", productsService.getFilteredProducts(filter));
        model.addAttribute("filter", filter);
        return "products";
    }

    private void copyFilter(Filter filter){
        this.filter.setTitlesPart(filter.getTitlesPart());
        this.filter.setPriceMin(filter.getPriceMin());
        this.filter.setPriceMax(filter.getPriceMax());
    }
}

package com.geekbrains.teryaevs.services;

@Service
public class ProductsService {
    private ProductRepository productRepository;

    @Autowired
    public void setProductRepository(ProductRepository productRepository) {
        this.productRepository = productRepository;
    }

    public Product getById(Long id) {
        return productRepository.findById(id).orElse(new Product(0L, "none", 0d));
    }

    public void add(Product product) {
        if (!product.getTitle().equals("") &&
                product.getPrice() > 0) {
            productRepository.save(product);
        }
    }

    public Iterable<Product> getAllProducts() {
        return productRepository.findAll(new Sort(Sort.Direction.ASC, "id"));
    }

    public Iterable<Product> getFilteredProducts(Filter filter) {
        return productRepository.findAllByTitleContainsAndPriceBetween(
                filter.getTitlesPart(), filter.getPriceMin(), filter.getPriceMax());
    }
}

package com.geekbrains.teryaevs.repositories;

@Repository
public interface ProductRepository extends PagingAndSortingRepository<Product, Long> {
    Iterable<Product> findAll(Sort sort);

    Iterable<Product> findAllByTitleContainsAndPriceBetween(String titlesPart, double min, double max);
}