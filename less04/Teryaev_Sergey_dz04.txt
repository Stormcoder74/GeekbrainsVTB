================================
Теряев Сергей ДЗ 04
https://github.com/Stormcoder74/GeekbrainsVTB/tree/master/less04
================================

package com.geekbrains.teryaevs.tasks1and2;

import java.util.ArrayList;
import java.util.List;

public class MainApp {
    public static void main(String[] args) {
        String[] array = {"1", "2", "3", "4", "5"};
        transposition(array, 0, 4);

        List<String> list = toArrayList(array);

        for (String s: list)
            System.out.println(s);
    }

    private static <E> void transposition(E[] array, int position1, int position2)
            throws IndexOutOfBoundsException {
        if (position1 < array.length && position2 < array.length){
            E tmp = array[position1];
            array[position1] = array[position2];
            array[position2] = tmp;
            return;
        }
        throw new IndexOutOfBoundsException();
    }

    private static <E> ArrayList<E> toArrayList(E... array){
        ArrayList<E> list = new ArrayList<>(array.length);
        for (E e : array)
            list.add(e);
        return list;
    }
}

package com.geekbrains.teryaevs.task3;

public abstract class Fruit {
    protected String type;
    protected float weight;

    public Fruit(String type, float weight) {
        this.type = type;
        this.weight = weight;
    }

    public String getType() {
        return type;
    }

    public float getWeight() {
        return weight;
    }
}

public class Apple extends Fruit {
    public Apple() {
        super("apple", 1.0f);
    }
}

public class Orange extends Fruit {
    public Orange() {
        super("orange", 1.5f);
    }
}

public class Box<T extends Fruit> {
    private List<T> box;

    public Box() {
        box = new ArrayList<>();
    }

    public Box(T... array) {
        this();
        Collections.addAll(box, array);
    }

    public float getWeight(){
        if (box.size() == 0)
            return 0;

        return box.size() * box.get(0).getWeight();
    }

    public boolean add(T element){
        return box.add(element);
    }

    public boolean compare(Box<? extends Fruit> another){
        return getWeight() - another.getWeight() < 0.0001;
    }

    public void pourIn(Box<T> another){
        for (int i = box.size() - 1; i >= 0; i--)
            another.add(box.remove(i));
    }
}

public class MainApp {
    public static void main(String[] args) {

        Box<Apple> aBox1 = new Box<>();
        Box<Apple> aBox2 = new Box<>(new Apple(),
                new Apple(), new Apple(), new Apple(), new Apple());
        Box<Orange> oBox = new Box<>();

        for (int i = 0; i < 10; i++) {
            aBox1.add(new Apple());
            oBox.add(new Orange());
        }

        System.out.println("первая коробка яблок весит: " + aBox1.getWeight());
        System.out.println("вторая коробка яблок весит: " + aBox2.getWeight());
        System.out.println("коробка апельсинов весит: " + oBox.getWeight());
        System.out.println("сравним коробку апельсинов с первой коробкой яблок: " + oBox.compare(aBox1));

        aBox1.pourIn(aBox2);
        System.out.println("пересыпали первую коробку яблок во вторую");

        System.out.println("первая коробка яблок весит: " + aBox1.getWeight());
        System.out.println("вторая коробка яблок весит: " + aBox2.getWeight());
        System.out.println("сравним коробку апельсинов со второй коробкой яблок: " + oBox.compare(aBox2));
    }
}