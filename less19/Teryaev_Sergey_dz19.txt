================================
Теряев Сергей ДЗ 19
https://github.com/Stormcoder74/GeekbrainsVTB/tree/master/less19
================================
package com.geekbrains.rabbitmq.producer;s;

public class TaskProducerApp {
    private static final String TASK_QUEUE_NAME = "task_queue1";
    private static final int AMOUNT_TASKS = 10;

    public static void main(String[] argv) throws Exception {
        ConnectionFactory factory = new ConnectionFactory();
        factory.setHost("localhost");
        try (Connection connection = factory.newConnection();
             Channel channel = connection.createChannel()) {
            boolean durable = true;
            channel.queueDeclare(TASK_QUEUE_NAME, durable, false, false, null);
            for (int i = 1; i <= AMOUNT_TASKS; i++) {
                String message = "Task #" + i;
                channel.basicPublish("", TASK_QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes("UTF-8"));
                Thread.sleep(2000);
                System.out.println("Added new task '" + message + "'");
            }
        }
    }
}

package com.geekbrains.rabbitmq.consumer;

public class TaskReceiverApp {

    private static final String TASK_QUEUE_NAME = "task_queue1";

    public static void main(String[] argv) throws Exception {
        ConnectionFactory factory = new ConnectionFactory();
        factory.setHost("localhost");
        final Connection connection = factory.newConnection();
        final Channel channel = connection.createChannel();

        channel.queueDeclare(TASK_QUEUE_NAME, true, false, false, null);
        System.out.println(" [*] Waiting for messages");

        channel.basicQos(1);

        DeliverCallback deliverCallback = (consumerTag, delivery) -> {
            String message = new String(delivery.getBody(), "UTF-8");

            System.out.println("Received new task: '" + message + "'. Do it!");
            try {
                System.out.println(doWork(message));
                channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);
            } catch (Exception e) {
                System.out.println("I can'n do it");
                System.exit(1);
            }
        };
        boolean autoAck = false;
        channel.basicConsume(TASK_QUEUE_NAME, autoAck, deliverCallback, consumerTag -> { });
    }

    private static String doWork(String task) throws Exception {
        Scanner scanner = new Scanner(System.in);
        String execution = scanner.nextLine();
        if ("done".equals(execution)){
            return task + " is done";
        }
        throw new Exception();
    }
}
